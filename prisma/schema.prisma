generator client {
  provider = "prisma-client-js"
  output   = "../server/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String?  @unique
  password    String?
  provider    String?  // e.g., 'google', 'local', etc.
  providerId  String?  // e.g., Google sub claim
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]
  settings    Settings?
  enrollments Enrollment[]
  leaderboard Leaderboard?
  pricingPlan PricingPlan? @relation(fields: [pricingPlanId], references: [id])
  pricingPlanId String?
  level       Int      @default(1)
  // Email verification
  emailVerified Boolean @default(false)
  emailVerificationToken String?
  // Password reset
  passwordResetToken String?
  passwordResetExpires DateTime?
  // MFA/2FA
  mfaEnabled Boolean @default(false)
  mfaSecret String?

  @@unique([provider, providerId])
}

model Settings {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  preferences Json?
}

model Course {
  id        String   @id @default(uuid())
  title     String
  description String
  createdAt DateTime @default(now())
  enrollments Enrollment[]
}

model Enrollment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  enrolledAt DateTime @default(now())
}

model Leaderboard {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  rank      Int
  score     Int
}

model PricingPlan {
  id        String   @id @default(uuid())
  name      String
  price     Float
  users     User[]
}

model Topic {
  id          String     @id @default(uuid())
  title       String
  description String
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  contents    Content[]
  activities  Activity[]
}

model Content {
  id         String   @id @default(uuid())
  topic      Topic    @relation(fields: [topicId], references: [id])
  topicId    String
  contentType String
  data       Json
  createdAt  DateTime @default(now())
}

model Activity {
  id        String   @id @default(uuid())
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  type      String
  data      Json
  createdAt DateTime @default(now())
} 